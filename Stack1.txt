#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX_SIZE_STACK 100
#define FALSE 0
#define TRUE 1

// 1. The number of left parentheses is the same as the number of right parentheses.
// 2. In parentheses of the same type, the left parenthesis must precede the right parenthesis.
// 3. The left and right parenthesis pairs of different types should not intersect each other.

typedef int element;
typedef struct {
    element stack[MAX_SIZE_STACK];
    int top;
} StackType;

void init(StackType *s){		// Stack initialization
    s->top = -1;
}

int is_empty(StackType *s){
    return s->top == -1;
}

int is_full(StackType *s){
    return s->top == MAX_SIZE_STACK-1;
}

void push(StackType *s, element item){
    if (is_full(s))
        exit(1);
    s->stack[++(s->top)] = item;
}

element pop(StackType *s){
    if (is_empty(s))
        exit(1);
    return s->stack[(s->top)--];
}

element peek(StackType *s){
    if (is_empty(s))
        exit(1);
    return s->stack[s->top];
}

int check_matching(char *in){
    StackType s;
    char ch; // character from in
    char open_ch; // character from stack
    int i;
    int n = (int) strlen(in);
    init(&s);
    
    for (i=0; i<n; i++) {
        ch = in[i]; // {
        switch (ch) {
            case '(': 
			case '{' : 
			case '[':
                push(&s, ch);
                break;
            case ')': case '}' : case ']':
                if (is_empty(&s)) // condition 1, 3
                    return FALSE; 	// many right parentheses
                open_ch = pop(&s); // condition 2, 3
                if ((open_ch == '(' && ch != ')') || (open_ch == '{' && ch != '}') ||(open_ch == '[' && ch != ']')) {
                    return FALSE;  //  Parentheses do not match
                }
                break;
        }
    }
    if (!is_empty(&s)) // condition 1
        return FALSE;  //  Many left parentheses 
    return TRUE;
}

int main(){
    if (check_matching("{A[(i+1)=0;]")==TRUE) {
        printf("Success\n");
    } else {
        printf("Fail\n");
    }
    return 0;
}


Parentheses Check The number of parentheses is the same
1. Match (T)
2. Mismatch (F)

The number of parentheses is not the same
1. The left parenthesis is more (F)
2. The right parenthesis is more (F)








